<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>aptasuite</groupId>
	<artifactId>aptasuite</artifactId>
	<version>0.0.1</version>
	<name>AptaSUITE</name>
	<description>A full-featured software collection for the comprehensive analysis of HT-SELEX experiments with both graphical and command line based user interfaces.</description>
	
	<profiles>
	
		<!-- Temporary profile to compile on NCBI windows machine -->
	    	<profile>
        		<id>windows</id>
        		<build>
	            		<directory>c:/Users/hoinkaj/temp/aptasuite</directory>
	        	</build>
	    	</profile>
    		
		<!-- Temporary profile to compile on NCBI lmem machine -->
	    	<profile>
        		<id>lmem</id>
	        	<dependencies>
	            		<dependency>
					  <groupId>javafx</groupId>
					  <artifactId>jfxrt</artifactId>
					  <version>${java.version}</version>
					  <scope>system</scope>
					  <systemPath>/usr/local/openjfx/8u182/jre/lib/ext/jfxrt.jar</systemPath>
				</dependency>
        		</dependencies>
	    	</profile>
    	
	</profiles>
	
	
	<build>
		<!-- Make sure we copy all required resouces into to jar. This
		will mirror the source locations. I.e. files in foo/bar/ in the 
		source folder will be packaged to foo/bar/ in the jar. -->
		<resources>
			<resource>
				<filtering>false</filtering>
				<directory>${basedir}/src/main/java</directory>
				<includes>
					<include>**/*.fxml</include>
					<include>**/*.css</include>
				</includes>
			</resource>
			<resource>
				<filtering>false</filtering>
				<directory>${basedir}/src/main/resources</directory>
				<includes>
					<include>**/*.*</include>
				</includes>
			</resource>
		</resources>
		<plugins>
		
			<plugin>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>versions-maven-plugin</artifactId>
			    <version>2.5</version>
			    <configuration>
			        <generateBackupPoms>false</generateBackupPoms>
			    </configuration>
			</plugin>		
		
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
 				 	<!-- <source>1.8</source>
					<target>1.8</target> -->
					<release>8</release>
					<forceJavacCompilerUse>true</forceJavacCompilerUse>
                 </configuration>				
			</plugin>
					
		    <plugin>
		        <groupId>org.openjfx</groupId>
		        <artifactId>javafx-maven-plugin</artifactId>
		        <version>0.0.4</version>
		    </plugin>
			
			<plugin>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-surefire-plugin</artifactId>
			    <version>2.22.0</version>
			    <configuration>
			        <argLine>
			            --illegal-access=permit
			        </argLine>
			    </configuration>
			</plugin>
			<plugin>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-failsafe-plugin</artifactId>
			    <version>2.22.0</version>
			    <configuration>
			        <argLine>
			            --illegal-access=permit
			        </argLine>
			    </configuration>
			</plugin>
			
			<plugin>
			  <groupId>org.apache.maven.plugins</groupId>
			  <artifactId>maven-site-plugin</artifactId>
			  <version>3.7.1</version>
			</plugin>
		
			<!-- The build scheme was adopted from https://ath3nd.wordpress.com/2013/12/25/packaging-a-multimodule-maven-spring-app-in-a-standalone-jar/ -->
			<plugin>
				<!-- This plugin is used to just copy all the dependency jars 
				of the main project into a single folder 
				(default is ${project.location}/target/dependency).  -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.2</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<overWriteReleases>true</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer> 
							<prependGroupId>true</prependGroupId>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- This plugin is used to add stuff to the manifest of your standalone jar. 
				The important thing is to add the classpath of each of your dependency jars 
				into the manifest. For this youâ€™d have to use a custom classpath layout -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>aptasuite.Aptasuite</mainClass>
							<classpathLayoutType>custom</classpathLayoutType>
							<!-- This needs to be lib/ otherwise, when compiled on windows, it will be lib\ which is not reliable by *nix systems -->
							<customClasspathLayout>lib/${artifact.groupId}.${artifact.artifactId}-${artifact.version}${dashClassifier?}.${artifact.extension}</customClasspathLayout>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<!-- And finally, the assembly plugin is used to generate the jar, but this 
				time it is not going to be using a predefined assembly descriptor but it would 
				have to create one on its own. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<id>assembly:package</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<descriptor>src${file.separator}main${file.separator}resources${file.separator}assembly.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

	<!-- Choose in Properties depending on the Platform -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.nd4j</groupId>
				<artifactId>nd4j-native-platform</artifactId>
				<version>${nd4j.version}</version>
			</dependency>
			<dependency>
				<groupId>org.nd4j</groupId>
				<artifactId>nd4j-cuda-7.5-platform</artifactId>
				<version>${nd4j.version}</version>
			</dependency>
			<dependency>
				<groupId>org.nd4j</groupId>
				<artifactId>nd4j-cuda-8.0-platform</artifactId>
				<version>${nd4j.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.mapdb</groupId>
			<artifactId>mapdb</artifactId>
			<version>3.0.8</version>
		</dependency>
		<dependency>
			<groupId>com.googlecode.concurrent-trees</groupId>
			<artifactId>concurrent-trees</artifactId>
			<version>2.6.0</version>
		</dependency>
		<dependency>
			<groupId>com.baqend</groupId>
			<artifactId>bloom-filter</artifactId>
			<version>2.2.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-configuration2</artifactId>
			<version>2.8.0</version>
		</dependency>
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.4</version>
		</dependency>
		<dependency>
			<groupId>net.sf.trove4j</groupId>
			<artifactId>trove4j</artifactId>
			<version>3.0.3</version>
		</dependency>
		<dependency>
			<groupId>com.milaboratory</groupId>
			<artifactId>milib</artifactId>
			<version>1.4</version>
		</dependency>
		<dependency>
			<groupId>net.byteseek</groupId>
			<artifactId>byteseek</artifactId>
			<version>2.0.3</version>
		</dependency>
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>1.4</version>
		</dependency>
		<dependency>
			<groupId>jfree</groupId>
			<artifactId>jfreechart</artifactId>
			<version>1.0.13</version>
		</dependency>
		<dependency>
			<groupId>com.itextpdf</groupId>
			<artifactId>itextpdf</artifactId>
			<version>5.5.13.1</version>
		</dependency>
		<dependency>
			<groupId>it.unimi.dsi</groupId>
			<artifactId>fastutil</artifactId>
			<version>8.1.1</version>
		</dependency>
		<dependency>
			<groupId>com.koloboke</groupId>
			<artifactId>koloboke-compile</artifactId>
			<version>0.5.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.koloboke</groupId>
			<artifactId>koloboke-impl-common-jdk8</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.collections</groupId>
			<artifactId>eclipse-collections-api</artifactId>
			<version>8.1.0</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.collections</groupId>
			<artifactId>eclipse-collections</artifactId>
			<version>8.1.0</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
		</dependency>
		<dependency>
    		<groupId>org.controlsfx</groupId>
    		<artifactId>controlsfx</artifactId>
    		<version>8.40.14</version>
		</dependency>	
		<dependency>
			<groupId>fr.orsay.lri</groupId>
			<artifactId>varna</artifactId>
			<version>3.93</version>
		</dependency>
		
		<!-- DEEP LEARNING FOR JAVA BEGIN -->
		<dependency>
			<groupId>org.datavec</groupId>
			<artifactId>datavec-api</artifactId>
			<version>${nd4j.version}</version>
		</dependency>
		<!-- cuDNN Option. This requires additional external dependencies, disable 
			for production or check for support in code -->
		<!-- <dependency> <groupId>org.deeplearning4j</groupId> <artifactId>deeplearning4j-cuda-8.0</artifactId> 
			<version>${nd4j.version}</version> </dependency> -->
		<dependency>
			<groupId>org.nd4j</groupId>
			<artifactId>${nd4j.backend}</artifactId>  <!-- WE NEED TO CHANGE THIS IN PROPERTIES FOR CPU/CUDA SUPPORT -->
		</dependency>
		<!-- Dependency for parallel wrapper (for multi-GPU parameter averaging) -->
		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-parallel-wrapper</artifactId>
			<version>0.7.2</version>
		</dependency>
		<!-- Core DL4J functionality -->
		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-core</artifactId>
			<version>${nd4j.version}</version>
		</dependency>
		<!-- Visualizing Network training functionality -->
		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-ui_2.11</artifactId>
			<version>${nd4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.7.12</version>
		</dependency>
		<!-- DEEP LEARNING FOR JAVA END -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.2</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.3.2</version>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20180130</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>16-ea+1</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-base</artifactId>
			<version>16-ea+1</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-swing</artifactId>
			<version>16-ea+1</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-graphics</artifactId>
			<version>16-ea+1</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>16-ea+1</version>
		</dependency>
	</dependencies>
	
	
	<repositories>
		<repository>
			<id>central</id>
			<name>bintray</name>
			<url>https://jcenter.bintray.com</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		
		<!-- Add local repository for libraries not available in maven central -->
   		<repository>
       		<id>aptasuite.local</id>
       		<name>aptasuite</name>
       		<url>file://${project.basedir}/repo</url>
   		</repository>
		
	</repositories>
	
	
	<properties>
		<!-- <nd4j.backend>nd4j-cuda-8.0-platform</nd4j.backend> -->
		<nd4j.backend>nd4j-native-platform</nd4j.backend>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- <maven.compiler.source>1.8</maven.compiler.source> -->
		<!-- <maven.compiler.target>1.8</maven.compiler.target> -->
		<nd4j.version>0.9.1</nd4j.version>
		<deeplearning4j-ui.version>0.6.0</deeplearning4j-ui.version>
	</properties>
	
</project>
